#!/usr/bin/env python3
"""
Comprehensive Karst Analysis Tool with Map Generation

This tool combines PRAPEC karst analysis with automatic map generation,
similar to how wetland and habitat analysis tools work.

Features:
- Analyzes cadastral properties for PRAPEC karst intersection
- Automatically generates professional karst maps
- Provides comprehensive regulatory assessment
- Organizes output into project directories
"""

import sys
import os
import json
from datetime import datetime
from typing import Dict, Any, List, Optional
from pydantic import BaseModel, Field

# Add parent directories to path for imports
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))

from langchain_core.tools import tool
from .prapec_karst_checker import PrapecKarstChecker
from .karst_map_generator import KarstMapGenerator
from cadastral.cadastral_search import MIPRCadastralSearch
from output_directory_manager import get_output_manager

class ComprehensiveKarstAnalysisInput(BaseModel):
    """Input schema for comprehensive karst analysis with map generation"""
    cadastral_number: str = Field(description="Cadastral number to analyze for PRAPEC karst (e.g., '227-052-007-20')")
    buffer_miles: Optional[float] = Field(default=1.0, description="Buffer distance in miles for analysis and map (default: 1.0)")
    include_buffer_search: Optional[bool] = Field(default=True, description="Whether to search within buffer if not directly in karst")
    generate_map: Optional[bool] = Field(default=True, description="Whether to generate a karst map (default: True)")

@tool("analyze_cadastral_karst_with_map", args_schema=ComprehensiveKarstAnalysisInput)
def analyze_cadastral_karst_with_map(
    cadastral_number: str,
    buffer_miles: Optional[float] = 1.0,
    include_buffer_search: Optional[bool] = True,
    generate_map: Optional[bool] = True
) -> Dict[str, Any]:
    """
    Comprehensive PRAPEC karst analysis with automatic map generation.
    
    This tool performs complete karst analysis including:
    1. Cadastral property data retrieval
    2. PRAPEC karst area intersection analysis
    3. Regulatory compliance assessment
    4. Professional map generation with karst layers
    5. Development recommendations and constraints
    
    The analysis covers PRAPEC (Plan y Reglamento del Área de Planificación Especial del Carso)
    areas in Puerto Rico, governed by Regulation 259.
    
    Args:
        cadastral_number: The cadastral number to analyze (e.g., '227-052-007-20')
        buffer_miles: Buffer distance in miles for analysis and map (default: 1.0)
        include_buffer_search: Whether to search within buffer if not directly in karst
        generate_map: Whether to generate a professional karst map (default: True)
        
    Returns:
        Dictionary containing:
        - karst_analysis: Comprehensive karst assessment
        - property_details: Cadastral property information
        - regulatory_implications: Detailed regulatory requirements
        - map_generation: Map generation results and file path
        - development_guidance: Recommendations for development
        - project_directory: Information about the output directory
        - files_generated: List of all files generated by this analysis
    """
    
    print(f"🏔️ Starting comprehensive karst analysis with map generation for cadastral {cadastral_number}...")
    
    # Get or create project directory
    output_manager = get_output_manager()
    if not output_manager.current_project_dir:
        # Create project directory if not already created
        project_dir = output_manager.create_project_directory(
            cadastral_number=cadastral_number
        )
        print(f"📁 Created project directory: {project_dir}")
    else:
        project_dir = output_manager.current_project_dir
        print(f"📁 Using existing project directory: {project_dir}")
    
    try:
        # Step 1: Perform karst analysis
        print("📊 Step 1: Performing PRAPEC karst analysis...")
        checker = PrapecKarstChecker()
        
        karst_result = checker.check_cadastral(
            cadastral_number=cadastral_number,
            buffer_miles=buffer_miles,
            include_buffer_search=include_buffer_search
        )
        
        if not karst_result['success']:
            return {
                "success": False,
                "error": karst_result.get('error', 'Karst analysis failed'),
                "cadastral_number": cadastral_number,
                "query_time": datetime.now().isoformat(),
                "project_directory": output_manager.get_project_info()
            }
        
        # Step 2: Get cadastral property coordinates for map generation
        print("📍 Step 2: Retrieving cadastral property coordinates...")
        cadastral_search = MIPRCadastralSearch()
        cadastral_data = cadastral_search.search_cadastral(cadastral_number)
        
        if not cadastral_data['success'] or not cadastral_data.get('results'):
            return {
                "success": False,
                "error": "Could not retrieve cadastral coordinates for map generation",
                "cadastral_number": cadastral_number,
                "karst_analysis": karst_result,
                "project_directory": output_manager.get_project_info()
            }
        
        # Extract coordinates from cadastral data
        primary_result = cadastral_data['results'][0]
        centroid = primary_result.get('centroid', {})
        if not centroid or 'longitude' not in centroid or 'latitude' not in centroid:
            return {
                "success": False,
                "error": "Could not extract coordinates from cadastral data",
                "cadastral_number": cadastral_number,
                "karst_analysis": karst_result,
                "project_directory": output_manager.get_project_info()
            }
        
        longitude = centroid['longitude']
        latitude = centroid['latitude']
        municipality = primary_result.get('municipality', 'Unknown')
        
        # Step 3: Generate karst map if requested
        map_result = None
        if generate_map:
            print("🗺️ Step 3: Generating professional karst map...")
            map_result = _generate_karst_map(
                longitude=longitude,
                latitude=latitude,
                cadastral_number=cadastral_number,
                municipality=municipality,
                buffer_miles=buffer_miles,
                output_manager=output_manager
            )
        
        # Step 4: Process and structure analysis results
        print("📋 Step 4: Processing comprehensive analysis results...")
        
        # Karst analysis summary
        karst_analysis = _process_karst_analysis(karst_result, buffer_miles)
        
        # Property details
        property_details = _extract_property_details(cadastral_data, karst_result)
        
        # Regulatory implications
        regulatory_implications = _generate_regulatory_implications(karst_result)
        
        # Development guidance
        development_guidance = _generate_development_guidance(karst_result, property_details)
        
        # Save comprehensive analysis data
        data_dir = output_manager.get_subdirectory("data")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        cadastral_safe = cadastral_number.replace('-', '_')
        
        comprehensive_data_file = os.path.join(data_dir, f"comprehensive_karst_analysis_{cadastral_safe}_{timestamp}.json")
        comprehensive_data = {
            "analysis_metadata": {
                "cadastral_number": cadastral_number,
                "buffer_miles": buffer_miles,
                "include_buffer_search": include_buffer_search,
                "generate_map": generate_map,
                "coordinates": {"longitude": longitude, "latitude": latitude},
                "municipality": municipality,
                "query_time": datetime.now().isoformat(),
                "tool_used": "analyze_cadastral_karst_with_map"
            },
            "karst_analysis": karst_analysis,
            "property_details": property_details,
            "regulatory_implications": regulatory_implications,
            "development_guidance": development_guidance,
            "raw_karst_result": karst_result,
            "raw_cadastral_data": cadastral_data
        }
        
        with open(comprehensive_data_file, 'w') as f:
            json.dump(comprehensive_data, f, indent=2, default=str)
        print(f"💾 Comprehensive karst analysis saved to: {comprehensive_data_file}")
        
        # Generate final response
        response = {
            "success": True,
            "cadastral_number": cadastral_number,
            "coordinates": {"longitude": longitude, "latitude": latitude},
            "municipality": municipality,
            "query_time": datetime.now().isoformat(),
            "karst_analysis": karst_analysis,
            "property_details": property_details,
            "regulatory_implications": regulatory_implications,
            "development_guidance": development_guidance,
            "map_generation": map_result if map_result else {"requested": False, "success": False},
            "project_directory": output_manager.get_project_info(),
            "files_generated": {
                "comprehensive_analysis": comprehensive_data_file,
                "map_file": map_result.get("map_file") if map_result and map_result.get("success") else None
            }
        }
        
        print(f"✅ Comprehensive karst analysis completed for cadastral {cadastral_number}")
        print(f"📁 All files saved to project directory: {project_dir}")
        
        return response
        
    except Exception as e:
        error_result = {
            "success": False,
            "error": str(e),
            "cadastral_number": cadastral_number,
            "query_time": datetime.now().isoformat(),
            "project_directory": output_manager.get_project_info() if output_manager.current_project_dir else {"error": "No project directory"}
        }
        print(f"❌ Error during comprehensive karst analysis: {str(e)}")
        return error_result

def _generate_karst_map(longitude: float, latitude: float, cadastral_number: str, 
                       municipality: str, buffer_miles: float, output_manager) -> Dict[str, Any]:
    """Generate professional karst map"""
    try:
        # Get maps directory from output manager
        maps_dir = output_manager.get_subdirectory("maps")
        
        # Initialize map generator
        map_generator = KarstMapGenerator(output_directory=maps_dir)
        
        # Generate descriptive location name
        location_name = f"Karst Analysis - Cadastral {cadastral_number}, {municipality}"
        
        # Generate the map with adaptive configuration
        map_path = map_generator.generate_map_export(
            longitude=longitude,
            latitude=latitude,
            location_name=location_name,
            buffer_miles=buffer_miles,
            base_map_name="World_Topo_Map",
            output_format="PDF",
            layout_template="Letter ANSI A Landscape",
            dpi=300,
            output_filename_prefix=f"karst_analysis_{cadastral_number.replace('-', '_')}"
        )
        
        if map_path:
            return {
                "success": True,
                "map_file": map_path,
                "buffer_miles": buffer_miles,
                "location_name": location_name,
                "message": "Professional karst map generated successfully",
                "map_features": [
                    "PRAPEC karst areas (overall)",
                    "APE-ZC special karst zones",
                    "ZA buffer zones (50m)",
                    "Cadastral property location marker",
                    "Topographic base map",
                    "Legend and scale bar"
                ]
            }
        else:
            return {
                "success": False,
                "message": "Failed to generate karst map",
                "attempted_location": location_name,
                "buffer_miles": buffer_miles
            }
            
    except Exception as e:
        return {
            "success": False,
            "message": f"Error generating karst map: {str(e)}",
            "buffer_miles": buffer_miles
        }

def _process_karst_analysis(karst_result: Dict[str, Any], buffer_miles: float) -> Dict[str, Any]:
    """Process karst analysis results into structured format"""
    
    analysis = {
        "within_karst_area": karst_result.get('in_karst', False),
        "karst_proximity": karst_result.get('karst_proximity', 'none'),
        "distance_to_karst_miles": karst_result.get('distance_miles', f"> {buffer_miles}"),
        "buffer_search_radius": buffer_miles
    }
    
    # Add karst area details if found
    if karst_result.get('karst_info'):
        karst_info = karst_result['karst_info']
        analysis["karst_area_details"] = {
            "official_name": karst_info.get('nombre', 'PRAPEC Karst Area'),
            "regulation": karst_info.get('regla', 'Regulation 259'),
            "total_area_hectares": karst_info.get('area_hectares', 'Unknown'),
            "description": karst_info.get('description', 'Special Planning Area for Karst Terrain')
        }
    
    # Risk assessment
    if analysis["within_karst_area"]:
        analysis["risk_level"] = "high"
        analysis["regulatory_impact"] = "high"
        analysis["assessment"] = "Property directly intersects with PRAPEC karst area"
    elif analysis["karst_proximity"] == "nearby":
        analysis["risk_level"] = "moderate"
        analysis["regulatory_impact"] = "moderate"
        analysis["assessment"] = f"PRAPEC karst area within {analysis['distance_to_karst_miles']} miles"
    else:
        analysis["risk_level"] = "low"
        analysis["regulatory_impact"] = "minimal"
        analysis["assessment"] = f"No PRAPEC karst area within {buffer_miles} mile radius"
    
    return analysis

def _extract_property_details(cadastral_data: Dict[str, Any], karst_result: Dict[str, Any]) -> Dict[str, Any]:
    """Extract property details from cadastral and karst data"""
    
    details = {}
    
    # Extract from cadastral data
    if cadastral_data.get('results'):
        primary_result = cadastral_data['results'][0]
        details.update({
            "cadastral_number": primary_result.get('cadastral_number', 'Unknown'),
            "municipality": primary_result.get('municipality', 'Unknown'),
            "neighborhood": primary_result.get('neighborhood', 'Unknown'),
            "land_use_classification": primary_result.get('classification_description', 'Unknown'),
            "zoning_code": primary_result.get('classification_code', 'Unknown'),
            "area_square_meters": primary_result.get('area_m2', 0),
            "area_hectares": primary_result.get('area_m2', 0) / 10000 if primary_result.get('area_m2') else 0,
            "area_acres": primary_result.get('area_m2', 0) * 0.000247105 if primary_result.get('area_m2') else 0
        })
        
        # Add coordinates
        centroid = primary_result.get('centroid', {})
        if centroid:
            details["coordinates"] = {
                "longitude": centroid.get('longitude'),
                "latitude": centroid.get('latitude')
            }
    
    # Add karst-specific property information
    if karst_result.get('cadastral_info'):
        karst_cadastral = karst_result['cadastral_info']
        # Update with karst checker results (may have additional details)
        details.update({
            "verified_municipality": karst_cadastral.get('municipality', details.get('municipality')),
            "verified_classification": karst_cadastral.get('classification', details.get('land_use_classification')),
            "verified_area_m2": karst_cadastral.get('area_m2', details.get('area_square_meters'))
        })
    
    return details

def _generate_regulatory_implications(karst_result: Dict[str, Any]) -> Dict[str, Any]:
    """Generate comprehensive regulatory implications"""
    
    implications = {
        "primary_regulation": "Regulation 259 (PRAPEC)",
        "authority": "Puerto Rico Planning Board (Junta de Planificación)",
        "special_planning_area": "Karst Terrain Protection"
    }
    
    if karst_result.get('in_karst'):
        implications.update({
            "compliance_level": "mandatory",
            "environmental_assessment_required": True,
            "special_permits_required": True,
            "geological_studies_required": True,
            "development_restrictions": "subject_to_karst_regulations",
            "consultation_required": ["Puerto Rico Planning Board", "Environmental Quality Board"],
            "permit_complexity": "high",
            "additional_requirements": [
                "Environmental Impact Statement may be required",
                "Geological and hydrological studies mandatory",
                "Special construction requirements for karst terrain",
                "Groundwater protection measures required",
                "Cave and sinkhole protection protocols"
            ]
        })
    elif karst_result.get('karst_proximity') == 'nearby':
        implications.update({
            "compliance_level": "recommended",
            "environmental_assessment_required": False,
            "special_permits_required": False,
            "geological_studies_required": False,
            "development_restrictions": "standard_with_considerations",
            "consultation_required": ["Puerto Rico Planning Board"],
            "permit_complexity": "standard",
            "additional_requirements": [
                "Geological assessment recommended",
                "Consider karst-related risks in site design",
                "Monitor for subsidence or groundwater issues",
                "Standard environmental compliance required"
            ]
        })
    else:
        implications.update({
            "compliance_level": "standard",
            "environmental_assessment_required": False,
            "special_permits_required": False,
            "geological_studies_required": False,
            "development_restrictions": "standard_requirements",
            "consultation_required": ["Local planning authorities"],
            "permit_complexity": "standard",
            "additional_requirements": [
                "Standard environmental compliance",
                "Regular building and zoning permits apply",
                "No special karst-related requirements"
            ]
        })
    
    return implications

def _generate_development_guidance(karst_result: Dict[str, Any], property_details: Dict[str, Any]) -> Dict[str, Any]:
    """Generate development guidance and recommendations"""
    
    guidance = {
        "development_feasibility": "unknown",
        "primary_constraints": [],
        "recommended_actions": [],
        "risk_mitigation": [],
        "timeline_considerations": []
    }
    
    if karst_result.get('in_karst'):
        guidance.update({
            "development_feasibility": "complex_with_restrictions",
            "primary_constraints": [
                "PRAPEC Regulation 259 compliance required",
                "Environmental impact assessment mandatory",
                "Geological studies required before development",
                "Special construction techniques for karst terrain",
                "Groundwater protection requirements"
            ],
            "recommended_actions": [
                "Engage environmental consultant specializing in karst areas",
                "Conduct preliminary geological assessment",
                "Consult with Puerto Rico Planning Board early in process",
                "Develop comprehensive environmental management plan",
                "Consider alternative site layouts to minimize karst impact"
            ],
            "risk_mitigation": [
                "Comprehensive geological and hydrological studies",
                "Cave and sinkhole mapping and protection",
                "Groundwater monitoring and protection systems",
                "Specialized foundation design for karst terrain",
                "Emergency response plans for geological hazards"
            ],
            "timeline_considerations": [
                "Environmental permitting: 6-12 months",
                "Geological studies: 2-4 months",
                "Regulatory review: 3-6 months",
                "Total additional time: 12-24 months"
            ]
        })
    elif karst_result.get('karst_proximity') == 'nearby':
        guidance.update({
            "development_feasibility": "standard_with_considerations",
            "primary_constraints": [
                "Proximity to karst area requires careful planning",
                "Potential for karst-related geological risks",
                "May need geological assessment for complex projects"
            ],
            "recommended_actions": [
                "Consider geological assessment for major developments",
                "Review groundwater impacts and drainage",
                "Consult with local planning authorities",
                "Design with karst proximity considerations"
            ],
            "risk_mitigation": [
                "Monitor for subsidence or groundwater changes",
                "Design foundations appropriate for local geology",
                "Consider drainage and runoff impacts",
                "Plan for potential geological monitoring"
            ],
            "timeline_considerations": [
                "Geological assessment (if needed): 1-2 months",
                "Additional design time: 2-4 weeks",
                "Minimal impact on standard permitting"
            ]
        })
    else:
        guidance.update({
            "development_feasibility": "standard",
            "primary_constraints": [
                "Standard zoning and building code requirements",
                "Regular environmental compliance"
            ],
            "recommended_actions": [
                "Follow standard development procedures",
                "Obtain regular building and zoning permits",
                "Comply with local environmental regulations"
            ],
            "risk_mitigation": [
                "Standard construction practices",
                "Regular environmental compliance",
                "Standard foundation and design requirements"
            ],
            "timeline_considerations": [
                "Standard permitting timelines apply",
                "No additional karst-related delays expected"
            ]
        })
    
    # Add property-specific considerations
    property_area_acres = property_details.get('area_acres', 0)
    if property_area_acres > 5:
        guidance["recommended_actions"].append("Consider phased development approach for large property")
    
    land_use = property_details.get('land_use_classification', '').lower()
    if 'residential' in land_use:
        guidance["recommended_actions"].append("Ensure residential development standards are met")
    elif 'commercial' in land_use:
        guidance["recommended_actions"].append("Consider commercial development impact on karst areas")
    elif 'industrial' in land_use:
        guidance["recommended_actions"].append("Industrial development may require enhanced environmental assessment")
    
    return guidance

# Export the tool for use in other modules
COMPREHENSIVE_KARST_TOOLS = [analyze_cadastral_karst_with_map]

def get_comprehensive_karst_tool_description() -> str:
    """Get description of the comprehensive karst tool"""
    return "Comprehensive PRAPEC karst analysis with automatic map generation - analyzes karst intersection, generates professional maps, and provides detailed regulatory guidance"

if __name__ == "__main__":
    print("🏔️ Comprehensive Karst Analysis Tool with Map Generation")
    print("=" * 60)
    print("This tool provides complete karst analysis including:")
    print("• PRAPEC karst area intersection analysis")
    print("• Professional karst map generation with all layers")
    print("• Comprehensive regulatory assessment (Regulation 259)")
    print("• Development guidance and constraints")
    print("• Property details and coordinates")
    print("• Risk assessment and mitigation strategies")
    print("\n💡 Usage:")
    print("   from karst.comprehensive_karst_analysis_tool import COMPREHENSIVE_KARST_TOOLS")
    print("   # Use with LangGraph agents")
    print("=" * 60) 